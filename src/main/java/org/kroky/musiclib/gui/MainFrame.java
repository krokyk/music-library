/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.musiclib.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.io.File;
import java.sql.Timestamp;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.SortOrder;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.kroky.commons.swing.utils.SwingUtils;
import org.kroky.commons.utils.Utils;
import org.kroky.musiclib.db.DAO;
import org.kroky.musiclib.db.DbManager;
import org.kroky.musiclib.db.entities.Album;
import org.kroky.musiclib.db.entities.Band;
import org.kroky.musiclib.db.entities.RecentDir;
import org.kroky.musiclib.gui.models.AlbumsTableModel;
import org.kroky.musiclib.gui.models.BandsTableModel;
import org.kroky.musiclib.gui.models.SortedUniqueListModel;
import org.kroky.musiclib.gui.table.AlbumsTable;
import org.kroky.musiclib.gui.table.BandsTable;
import org.kroky.musiclib.jobs.CheckForNewAlbumsJob;
import org.kroky.musiclib.jobs.ScanDirJob;
import org.kroky.musiclib.jobs.UpdateBandsJob;

import foxtrot.Worker;

/**
 *
 * @author user
 */
public class MainFrame extends javax.swing.JFrame {

    private static final Logger LOG = LogManager.getLogger();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        myInit();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jPanel1 = new JPanel();
        btnScanDir = new JButton();
        btnBrowse = new JButton();
        jPanel3 = new JPanel();
        jLabel1 = new JLabel();
        progressBar = new JProgressBar();
        btnCheck = new JButton();
        chkOnlySelected = new JCheckBox();
        btnSelectAll = new JButton();
        jSplitPane1 = new JSplitPane();
        spBandsTable = new JScrollPane();
        spAlbumsTable = new JScrollPane();
        cbDirPath = new JComboBox<>();
        btnDelete = new JButton();

        jTable1.setModel(
                new DefaultTableModel(
                        new Object[][] { { null, null, null, null }, { null, null, null, null },
                                { null, null, null, null }, { null, null, null, null } },
                        new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Library");

        btnScanDir.setText("Scan dir");
        btnScanDir.addActionListener(evt -> btnScanDirActionPerformed(evt));

        btnBrowse.setText("Browse...");
        btnBrowse.addActionListener(evt -> btnBrowseActionPerformed(evt));

        jLabel1.setText("Progress:");

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup().addContainerGap().addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, GroupLayout.DEFAULT_SIZE, 929, Short.MAX_VALUE).addContainerGap()));
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
                GroupLayout.Alignment.TRAILING,
                jPanel3Layout.createSequentialGroup().addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(jLabel1)
                                .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                        GroupLayout.PREFERRED_SIZE))
                        .addContainerGap()));

        btnCheck.setText("Check for new albums...");
        btnCheck.addActionListener(evt -> btnCheckActionPerformed(evt));

        chkOnlySelected.setSelected(true);
        chkOnlySelected.setText("Only selected");

        btnSelectAll.setText("Select all");
        btnSelectAll.addActionListener(evt -> btnSelectAllActionPerformed(evt));

        spBandsTable.setBorder(BorderFactory.createTitledBorder("Bands"));
        spBandsTable.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jSplitPane1.setLeftComponent(spBandsTable);

        spAlbumsTable.setBorder(BorderFactory.createTitledBorder("Albums"));
        spAlbumsTable.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jSplitPane1.setRightComponent(spAlbumsTable);

        cbDirPath.setEditable(true);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(evt -> btnDeleteActionPerformed(evt));

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout
                        .createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbDirPath, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(btnBrowse)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(btnScanDir))
                        .addGroup(jPanel1Layout.createSequentialGroup().addComponent(btnCheck)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(chkOnlySelected)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)
                                .addComponent(btnDelete).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectAll))
                        .addComponent(jSplitPane1)).addContainerGap()));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING,
                        jPanel1Layout.createSequentialGroup().addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                                        .addComponent(btnScanDir).addComponent(btnBrowse).addComponent(cbDirPath,
                                                GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                                GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13)
                                .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCheck).addComponent(chkOnlySelected).addComponent(btnSelectAll)
                                        .addComponent(btnDelete))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel3,
                                        GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                        GroupLayout.PREFERRED_SIZE)));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jPanel1,
                GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnScanDirActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnScanDirActionPerformed
        final String dirPath = cbDirPath.getSelectedItem() != null ? cbDirPath.getSelectedItem().toString() : null;
        final File dir = Utils.getFullFile(dirPath);
        if (!dir.isDirectory()) {
            JOptionPane.showMessageDialog(this, "No such directory exists, browse again.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        storeRecentDir(dir);
        Set<Band> bands = (Set<Band>) Worker.post(new ScanDirJob(this, dir));
        Worker.post(new UpdateBandsJob(this, bands));
    }// GEN-LAST:event_btnScanDirActionPerformed

    private void btnBrowseActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnBrowseActionPerformed
        JFileChooser chooser = new JFileChooser(Utils.getFullFile(cbDirPath.getSelectedItem()));
        chooser.setDialogTitle("Select directory to scan");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            File dir = chooser.getSelectedFile();
            storeRecentDir(dir);
        }
    }// GEN-LAST:event_btnBrowseActionPerformed

    public void storeRecentDir(File dir) {
        String path = Utils.getFullPath(dir);
        RecentDir recentDir = new RecentDir(path, new Timestamp(System.currentTimeMillis()));
        cbDirPath.addItem(recentDir);
        cbDirPath.setSelectedItem(recentDir);
        RecentDir fromDb = DAO.get(RecentDir.class, path);
        if (fromDb != null) {
            fromDb.setLastDate(recentDir.getLastDate());
            DAO.saveOrUpdate(fromDb);
        } else {
            DAO.saveOrUpdate(recentDir);
        }
    }

    private void btnCheckActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnCheckActionPerformed
        Worker.post(new CheckForNewAlbumsJob(this));
        bandsTableSelection();
    }// GEN-LAST:event_btnCheckActionPerformed

    private void btnSelectAllActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnSelectAllActionPerformed
        TableModel model = tableAlbums.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (!(Boolean) model.getValueAt(i, 2)) {
                model.setValueAt(true, i, 2);
            }
        }
    }// GEN-LAST:event_btnSelectAllActionPerformed

    private void btnDeleteActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnDeleteActionPerformed
        int retVal = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete selected album(s)?",
                "Delete?", JOptionPane.YES_NO_OPTION);
        if (retVal == JOptionPane.NO_OPTION) {
            return;
        }
        tableAlbums.removeAlbums(tableAlbums.getSelectedRows());
        final BandsTableModel bandsTableModel = (BandsTableModel) tableBands.getModel();
        bandsTableModel.fireTableRowsUpdated(0, bandsTableModel.getRowCount() - 1);
    }// GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnBrowse;
    private JButton btnCheck;
    private JButton btnDelete;
    private JButton btnScanDir;
    private JButton btnSelectAll;
    private JComboBox<RecentDir> cbDirPath;
    private JCheckBox chkOnlySelected;
    private JLabel jLabel1;
    private JPanel jPanel1;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JSplitPane jSplitPane1;
    private JTable jTable1;
    private JProgressBar progressBar;
    private JScrollPane spAlbumsTable;
    private JScrollPane spBandsTable;
    // End of variables declaration//GEN-END:variables

    private final BandsTable tableBands = new BandsTable(new BandsTableModel(), 0, SortOrder.ASCENDING);
    private final AlbumsTable tableAlbums = new AlbumsTable(new AlbumsTableModel(), 1, SortOrder.ASCENDING);

    private void myInit() {
        LOG.info("Working dir: " + Utils.getFullPath(new File(".")));
        SwingUtils.centerOnScreen(this);
        addWindowListener(new java.awt.event.WindowAdapter() {
            // <editor-fold defaultstate="collapsed" desc="Window closing event - save config and shutdown DB">
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                DbManager.getInstance().shutdownDb();
                System.exit(0);
            }
            // </editor-fold>
        });

        // <editor-fold defaultstate="collapsed" desc="Bands table">
        tableBands.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableBands.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                bandsTableSelection();
            }
        });
        // spBandsTable.setMinimumSize(new Dimension(500, 500));
        // spBandsTable.setPreferredSize(new Dimension(500, 500));
        spBandsTable.setViewportView(tableBands);
        int size = tableBands.getParent().getPreferredSize().width;
        tableBands.getColumnModel().getColumn(0).setPreferredWidth(Math.round(0.4f * size));
        tableBands.getColumnModel().getColumn(1).setPreferredWidth(Math.round(0.45f * size));
        tableBands.getColumnModel().getColumn(2)
                .setPreferredWidth(size - (tableBands.getColumnModel().getColumn(0).getPreferredWidth()
                        + tableBands.getColumnModel().getColumn(1).getPreferredWidth()));
        // System.out.print(size);
        // System.out.print(" = " + tableBands.getColumnModel().getColumn(0).getPreferredWidth());
        // System.out.print(" + " + tableBands.getColumnModel().getColumn(1).getPreferredWidth());
        // System.out.println(" + " + tableBands.getColumnModel().getColumn(2).getPreferredWidth());
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="Albums table">
        // spAlbumsTable.setMinimumSize(new Dimension(500, 500));
        // spAlbumsTable.setPreferredSize(new Dimension(500, 500));
        spAlbumsTable.setViewportView(tableAlbums);
        size = tableAlbums.getParent().getPreferredSize().width;
        tableAlbums.getColumnModel().getColumn(0).setPreferredWidth(Math.round(0.7f * size));
        tableAlbums.getColumnModel().getColumn(1).setPreferredWidth(Math.round(0.2f * size));
        tableAlbums.getColumnModel().getColumn(2)
                .setPreferredWidth(size - (tableAlbums.getColumnModel().getColumn(0).getPreferredWidth()
                        + tableAlbums.getColumnModel().getColumn(1).getPreferredWidth()));
        final AlbumsTableModel model = (AlbumsTableModel) tableAlbums.getModel();
        model.addTableModelListener(e -> {
            if (e.getType() != TableModelEvent.UPDATE || e.getFirstRow() != e.getLastRow()) {
                return;
            }
            int changedRow = e.getFirstRow();
            BandsTableModel bandModel = (BandsTableModel) tableBands.getModel();
            Band band = tableAlbums.getAlbum(changedRow).getBand();
            int bandIndex = tableBands.convertRowIndexToModel(tableBands.getIndexOf(band));
            bandModel.fireTableCellUpdated(bandIndex, 2);
        });
        // System.out.print(size);
        // System.out.print(" = " + tableAlbums.getColumnModel().getColumn(0).getPreferredWidth());
        // System.out.print(" + " + tableAlbums.getColumnModel().getColumn(1).getPreferredWidth());
        // System.out.println(" + " + tableAlbums.getColumnModel().getColumn(2).getPreferredWidth());
        // </editor-fold>
        TreeSet<RecentDir> recentDirs = null;
        try {
            recentDirs = DAO.getRecentDirs();
        } catch (Exception e) {
            LOG.error("DB ERROR", e);
            DbManager.getInstance().shutdownDb();
            JOptionPane.showMessageDialog(this, "DB Error occured. See the log for details. Application will close.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }

        final SortedUniqueListModel<RecentDir> cbModel = new SortedUniqueListModel<>(recentDirs, 10);
        if (!recentDirs.isEmpty()) {
            cbModel.setSelectedItem(recentDirs.first());
        }
        cbDirPath.setModel(cbModel);
        cbDirPath.getEditor().addActionListener((ActionEvent e) -> {
            btnScanDirActionPerformed(e);
        });
        cbDirPath.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                cbDirPath.getEditor().setItem(e.getItem());
            }
        });
        AutoCompleteDecorator.decorate(cbDirPath);
    }

    private void bandsTableSelection() {
        // <editor-fold defaultstate="collapsed" desc="...">
        int[] indices = tableBands.getSelectedRows();
        HashSet<Album> albums = new HashSet<>();
        if (indices.length != 0) {
            for (int idx : indices) {
                Band band = tableBands.getBand(idx);
                albums.addAll(band.getAlbums());
            }
        }
        AlbumsTableModel model = (AlbumsTableModel) tableAlbums.getModel();
        model.replaceAll(albums);
        // </editor-fold>
    }

    public JButton getBtnBrowse() {
        return btnBrowse;
    }

    public JButton getBtnScanDir() {
        return btnScanDir;
    }

    public JProgressBar getProgressBar() {
        return progressBar;
    }

    public JButton getBtnCheck() {
        return btnCheck;
    }

    public JCheckBox getChkOnlySelected() {
        return chkOnlySelected;
    }

    public BandsTable getTableBands() {
        return tableBands;
    }

    public AlbumsTable getTableAlbums() {
        return tableAlbums;
    }
}
